@page "/"
@inject NavigationManager NavigationManager
@inject AppDbContext Context
@inject CartService CartService
@implements IDisposable

<PageTitle>Menu</PageTitle>

<div class="cart-summary">
    <h3>Podsumowanie koszyka</h3>
    <button class="button" @onclick="GoToCart">
        Przejdź do koszyka (@CartService.TotalItemsCount) - @CartService.TotalPrice.ToString("C")
    </button>
    @if (CartService.GetGroupedCartItems().Any())
    {
        <ul class="cart-items-preview">
            @foreach (var group in CartService.GetGroupedCartItems())
            {
                <li>
                    @group.DishItem.Name (x @group.Quantity) - @group.GroupTotalPrice.ToString("C")
                    <button class="button button-remove-small" @onclick="() => HandleRemoveAllInstances(group.DishItem.DishId)">Usuń wszystkie</button>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Koszyk jest pusty.</p>
    }
</div>

<h1>Menu Restauracji</h1>

@if (showQuantityInput)
{
    <div class="quantity-dialog">
        <div>
            <label>Ile porcji chcesz dodać?</label>
            <input type="number" min="1" @bind="quantityInput" />
        </div>
        <div>
            <button class="button" @onclick="ConfirmQuantity">OK</button>
            <button class="button" @onclick="CancelQuantity">Anuluj</button>
        </div>
        @if (!string.IsNullOrEmpty(quantityError))
        {
            <div class="error">@quantityError</div>
        }
    </div>
}

<table>
    <thead>
        <tr>
            <th>Id</th>
            <th>Nazwa</th>
            <th>Cena [zł]</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var m in Context.Menu)
        {
            <tr>
                <td>@m.DishId</td>
                <td>@m.Name</td>
                <td>@m.Price.ToString("C")</td>
                <td><button class="button" @onclick="@(() => StartAddToCart(m.DishId))">Dodaj do koszyka</button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    // Zmienne do obsługi dialogu ilości
    private bool showQuantityInput = false;
    private int quantityInput = 1;
    private int? pendingDishId = null;
    private string quantityError = "";

    protected override void OnInitialized()
    {
        CartService.OnChange += OnCartChanged;
    }

    void StartAddToCart(int id)
    {
        pendingDishId = id;
        quantityInput = 1;
        quantityError = "";
        showQuantityInput = true;
    }

    void CancelQuantity()
    {
        showQuantityInput = false;
        pendingDishId = null;
        quantityError = "";
    }

    async Task ConfirmQuantity()
    {
        if (quantityInput < 1)
        {
            quantityError = "Proszę wprowadzić prawidłową ilość (minimum 1).";
            return;
        }
        if (pendingDishId.HasValue)
        {
            var item = Context.Menu.FirstOrDefault(m => m.DishId == pendingDishId.Value);
            if (item != null)
            {
                await CartService.AddToCart(item, quantityInput);
            }
        }
        showQuantityInput = false;
        pendingDishId = null;
        quantityError = "";
        // StateHasChanged() zostanie wywołane przez OnCartChanged dzięki CartService.OnChange
    }

    async Task HandleRemoveAllInstances(int dishId)
    {
        await CartService.RemoveAllInstancesOfItem(dishId);
        // StateHasChanged() zostanie wywołane przez OnCartChanged dzięki CartService.OnChange
    }

    void GoToCart() => NavigationManager.NavigateTo("/cart");

    private void OnCartChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CartService.OnChange -= OnCartChanged;
    }
}
